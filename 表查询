
*****************表查询：


逻辑查询：
 select * from tab9 where id=2 or id=3 or id=4;//逻辑或，也可以用||

 select * from tab9 where id in (2,3,4);//在id为2,3,4中的所有的，结果类似上面的逻辑或

 select * from tab9 where name='zhang' and age=18;//逻辑与查询，也可以用&&



模糊查询：
select * from tab9 where name like 'wa_';//下划线匹配任意一位字符，如果匹配2位就写2个下划线，可匹配前面或者后面，或者中间

select name from tab9 where name like "%n%";//表示n前后匹配若干位字符，也可是0位，如果只写% 表示匹配若干位字符显示所有的。如果不加%，like和=等号是一样的

排序与受限查询：
select * from tab9 order by id desc;//通过id倒序排列descend
select * from tab9 order by id asc;//通过id倒序排列ascend

select * from tab9 id limit 0,5;//字段id可有可无，下标从0开始，5是长度
select * from tab9 order by id desc limit 0,5;
select * from tab9 order by id asc limit 1,5;//下标从0开始，第一个开始截取5个


聚合查询总数，总和，平均值，最大最小查询：
select count(id) from student;
select sum(age) from student;
select avg(age) from student;
select max(age) from student;
select min(age) from student;
select count(id),sum(age) from student;


分组查询：
 select name,count(id) from tab91 group by name;//以name为标准参考查询
 select name,count(id) from tab91 group by name order by count(id);// 以id排序默认从小到大asc
select name,count(id) from tab91 group by name order by count(id) desc;//以id逆向排序
select name,count(id) from tab91 group by name order by count(id) desc limit 2,3;//分组，逆向加限制第二个开始截取三个
 select name,count(id) from tab91 group by name having count(id)>1;//默认是从小到大的排序，后面也可以再跟order by count(id);

 子查询和联合查询：
mysql> create table stu(id int unsigned auto_increment,name varchar(10) not null,sex
 enum('man','woman') default 'man',age int not null,primary key(id)) engine=innodb;//要设置外键，此处要求用innodb表引擎类型
mysql> create table sco(id int unsigned auto_increment,html int not null,css int not
 null,js int not null,pid int not null,primary key(id),foreign key(pid) references s
tudent(id)) engine=innodb;//字表也必须是innodb才会受限（关联内容的父表不能删除关联的行内容）


mysql> select stu.id,stu.name,stu.sex,stu.age,sco.html,sco.css,sco.js,sco.pid from stu,sco where sco.pid =stu.id; //普通查询父表和字表的分数对应的名单

mysql> select stu.id,stu.name,stu.sex,stu.age,sco.html,sco.css,sco.js,sco.pid from s
co,stu where sco.pid =stu.id order by id;//上面基础上加个默认顺序，升序
mysql> select stu.id,stu.name,stu.sex,stu.age,sco.html,sco.css,sco.js,sco.pid from s
co,stu where sco.pid =stu.id order by id desc limit 0,2;//降序，受限从0开始，截取2个

联合查询：
mysql> select stu.id,stu.name,stu.sex,stu.age,sco.html,sco.css,sco.js,sco.pid from s
tu join sco on stu.id=sco.pid; //join前没有left和right，此时和普通查询一样

mysql> select stu.id,stu.name,stu.sex,stu.age,sco.html,sco.css,sco.js,sco.pid from s
tu left join sco on stu.id=sco.pid;//父和子都是inodb，主键在前，join前加left则左边全有，右边可能为null
mysql> select stu.id,stu.name,stu.sex,stu.age,sco.html,sco.css,sco.js,sco.pid from s
tu right join sco on stu.id=sco.pid;//父和子都是inodb，主键在前，join前加right则只显示相互匹配的，跟普通查询显示效果一样

嵌套查询：
 select * from sco where pid in (select id from stu where name='zhang');//括号内表示name='zhang'的所有id
 mysql> select * from sco where pid in (select id from stu where name='liu' or name='
wan');


外键的约束
对子表的约束
子表数据进行写操作（增和改）的时候，如果对应的外键字段在父表找不到对应的匹配，那么操作会失败
对父表的约束
父表数据进行写操作（删和改：并且涉及到主键本身），如果对应的主键在子表中已经被数据所引用，那么久不允许操作

对于已经创建的表来说，增加外键的方式是 
语句：alter  table  表名  add  foreign  key（外键字段）  references  主表（主表主键）
alter table sco add foreign key(id) references stu(id);


*/
外键（foreign  key）
概念：外面的键，不在自己的表中：如果一张表中有一个字段（非主键）指向另外一张表的主键，那么我们将该字段称之为外键。

表中的关系
一对一
一对多
多对多

增加外键
外键可以再创建表的时候或者在创建表之后增加，一张表可以有多个外键
创建表的时候增加外键，那么在所有表的字段之后使用foreign  key外键字段，references  （外部表主键字段）
外键要求自己本身必须先是一个索引，如果字段本身不是一个索引，那么外键会先创建一个索引，然后才会创建外键本身。
语句：foreign  key（外键名）  references  主表（主表主键）
作用：主要应用于联合查询（也就是多表查询）
对于已经创建的表来说，增加外键的方式是 
语句：alter  table  表名  add  foreign  key（外键字段）  references  主表（主表主键）

外键的约束
对子表的约束
子表数据进行写操作（增和改）的时候，如果对应的外键字段在父表找不到对应的匹配，那么操作会失败

对父表的约束
父表数据进行写操作（删和改：并且涉及到主键本身），如果对应的主键在子表中已经被数据所引用，那么久不允许操作

外键的条件：
外键要求表的类型必须是innodb
如果不是innodb，那么外键能够创建成功，但是创建成功后没有了约束效果。
外键的数据类型必须与主键的数据类型必须完全一致
一张表中外键名不能重复
如果数据已经存在，那么必须保证外键数据与父表中的主键数据相互一致






2.操作实例

表A记录如下：
aID               aNum
1                  a20050111
2                  a20050112
3                  a20050113
4                  a20050114
5                  a20050115

表B记录如下:
bID               bName
1                   2006032401
2                  2006032402
3                  2006032403
4                  2006032404
8                  2006032408




**************联合查询 left join on,right join on 和inner join on
实验如下:
1.left join

sql语句如下: 
select * from A
left join B 
on A.aID = B.bID

结果如下:
aID               aNum                          bID                  bName
1                   a20050111                1                      2006032401
2                   a20050112                2                     2006032402
3                   a20050113                3                     2006032403
4                   a20050114                4                     2006032404
5                   a20050115                NULL              NULL
（所影响的行数为 5 行）

结果说明:
               left join是以A表的记录为基础的,A可以看成左表,B可以看成右表,left join是以左表为准的.
换句话说,左表(A)的记录将会全部表示出来,而右表(B)只会显示符合搜索条件的记录(例子中为: A.aID = B.bID).
B表记录不足的地方均为NULL.

2.right join
sql语句如下: 
select * from A
right join B 
on A.aID = B.bID
结果如下:
aID               aNum                          bID                  bName
1                   a20050111                1                      2006032401
2                   a20050112                2                     2006032402
3                   a20050113                3                     2006032403
4                   a20050114                4                     2006032404
NULL           NULL                          8                     2006032408
（所影响的行数为 5 行）
结果说明:
        仔细观察一下,就会发现,和left join的结果刚好相反,这次是以右表(B)为基础的,A表不足的地方用NULL填充.


3.inner join
sql语句如下: 
select * from A
innerjoin B 
on A.aID = B.bID

结果如下:
aID               aNum                          bID                  bName
1                   a20050111                1                      2006032401
2                   a20050112                2                     2006032402
3                   a20050113                3                     2006032403
4                   a20050114                4                     2006032404

结果说明:
        很明显,这里只显示出了 A.aID = B.bID的记录.这说明inner join并不以谁为基础,它只显示符合条件的记录.  还有就是inner join 可以结合where语句来使用 如：   select * from A innerjoin B on A.aID = B.bID where b.bname='2006032401' 这样的话 就只会放回一条数据了


